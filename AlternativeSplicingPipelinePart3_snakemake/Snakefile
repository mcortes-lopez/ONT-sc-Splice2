shell.executable("/bin/bash")

""" Snakemake pipeline for 10X Genomics 3' single-cell RNA-seq and ONT long read joint isoform analysis """

configfile: "config.yaml"

WORKDIR = config["WORKDIR"]
RUN_FILES = config["RUN_FILES"]
RUN_FILESIR = config["RUN_FILESIR"]
SAMPLES = config["SAMPLES"]
SAMPLES = ','.join(SAMPLES)
NPERM = config["NPERM"]
JOB_NAME = config["JOB_NAME"]
COMP_GROUPS_COLUMN = config["COMP_GROUPS_COLUMN"]
CELL_GROUPS_COLUMN = config["CELL_GROUPS_COLUMN"]
GROUPLIST = config["GROUPLIST"]
OUTPUTDIR = config["OUTPUTDIR"]
OUTPUTDIRIR = config["OUTPUTDIR"]
JUNC_COV_THRESH = config["JUNC_COV_THRESH"]
COMP1 = config["COMP1"]
COMP2 = config["COMP2"]
NCHUNK = config["N_CHUNK"]
rule all:
  input:
    expand("{workdir}/{outputdir}/combined_metadata/combined_metadata.csv", workdir = WORKDIR, outputdir = OUTPUTDIR),
    expand("{workdir}/{outputdir}/{grouplist}/split_cluster_files/complete.txt", workdir = WORKDIR, outputdir = OUTPUTDIR, grouplist = GROUPLIST),
    expand("{workdir}/{outputdir}/{grouplist}/split_cluster_output/complete.txt", workdir = WORKDIR, outputdir = OUTPUTDIR, grouplist = GROUPLIST),
    expand("{workdir}/{outputdir}/{grouplist}/merge_final_output/logOR_within_cell_type_ALT_3P_Junctions_with_threshold_info.txt", workdir = WORKDIR, outputdir = OUTPUTDIR, grouplist = GROUPLIST),
    expand("{workdir}/{outputdirIR}/combined_metadata_IR/combined_metadata_IR.csv", workdir = WORKDIR, outputdirIR = OUTPUTDIRIR),
    expand("{workdir}/{outputdirIR}/{grouplist}/split_cluster_files_IR/complete_IR.txt", workdir = WORKDIR, outputdirIR = OUTPUTDIRIR, grouplist = GROUPLIST),
    expand("{workdir}/{outputdirIR}/{grouplist}/split_cluster_output_IR/complete_IR.txt", workdir = WORKDIR, outputdirIR = OUTPUTDIRIR, grouplist = GROUPLIST),
    expand("{workdir}/{outputdirIR}/{grouplist}/merge_final_output_IR/logOR_within_cell_type_ALT_3P_Junctions.txt", workdir = WORKDIR, outputdirIR = OUTPUTDIRIR, grouplist = GROUPLIST)

""" Combine Metadata to make Common Cluster ID's """
rule combine_meta:
  input:
    "{workdir}/{outputdir}/DT_input/3.Junction_metadata"
  output:
    "{workdir}/{outputdir}/combined_metadata/combined_metadata.csv",
  params:
    job_name = "combine_meta",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdir}",
    run_files = RUN_FILES,
    junc_metadata = "{workdir}/{outputdir}/DT_input/3.Junction_metadata",
    samples = SAMPLES,
  log:
    "{workdir}/{outputdir}/logs/combine_meta.txt"
  threads:
    10
  shell:
    """
    cd {params.workdir}
    mkdir -p {params.outputdir}
    cd {params.outputdir}
    mkdir -p combined_metadata
    #module load R/4.1.2
    Rscript {params.run_files}/combine_metadata.R {params.junc_metadata} {params.workdir}/{params.outputdir}/combined_metadata {params.samples}
    """

""" Split clusters for differential transcript usage """
rule split_clusters:
  input:
    "{workdir}/{outputdir}/combined_metadata/combined_metadata.csv",
  output:
    "{workdir}/{outputdir}/{grouplist}/split_cluster_files/complete.txt"
  params:
    job_name = "split_clusters",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdir}",
    grouplist = GROUPLIST,
    run_files = RUN_FILES,
    counts = "{workdir}/{outputdir}/DT_input/1.JuncCounts_matrix",
    cell_metadata = "{workdir}/{outputdir}/DT_input/2.Cell_metadata",
    junc_metadata = "{workdir}/{outputdir}/DT_input/3.Junction_metadata",
    comp_groups_column = COMP_GROUPS_COLUMN,
    comp1 = COMP1,
    comp2 = COMP2,
    cell_groups_column = CELL_GROUPS_COLUMN,
    samples = SAMPLES,
    junc_cov_thresh = JUNC_COV_THRESH
  log:
    "{workdir}/{outputdir}/logs/{grouplist}_split_clusters.txt"
  threads:
    10
  shell:
    """
    cd {params.workdir}
    cd {params.outputdir}
    mkdir -p {params.grouplist}
    cd {params.grouplist}
    mkdir -p split_cluster_files
    cd split_cluster_files

    for i in {{1..100}}
    do
      echo $i
      touch test.txt
      mkdir -p split_$i
      mkdir -p split_"$i"/three_prime
      mkdir -p split_"$i"/five_prime
      mkdir -p split_"$i"/three_prime/counts_files
      mkdir -p split_"$i"/three_prime/data_tables
      mkdir -p split_"$i"/five_prime/counts_files
      mkdir -p split_"$i"/five_prime/data_tables
    done
    #module load R/4.1.2
    Rscript {params.run_files}/split_ind_cell_type_combined_2WT.R {params.counts} {params.cell_metadata} {params.comp_groups_column} {params.cell_groups_column} {params.grouplist} {params.junc_metadata} {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_files {params.samples} {params.junc_cov_thresh} {params.comp1} {params.comp2}
    touch complete.txt
    """

""" Batch submit each split cluster for differential analysis """
rule run_split:
  input:
    "{workdir}/{outputdir}/{grouplist}/split_cluster_files/complete.txt"
  output:
    "{workdir}/{outputdir}/{grouplist}/split_cluster_output/complete.txt"
  params:
    job_name = "split_clusters",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdir}",
    grouplist = "{grouplist}",
    run_files = RUN_FILES,
    counts = "{workdir}/{outputdir}/DT_input/1.JuncCounts_matrix",
    cell_metadata = "{workdir}/{outputdir}/DT_input/2.Cell_metadata",
    junc_metadata = "{workdir}/{outputdir}/DT_input/3.Junction_metadata",
    comp_groups_column = COMP_GROUPS_COLUMN,
    cell_groups_column = CELL_GROUPS_COLUMN,
    samples = SAMPLES,
    nperm = NPERM,
    junc_cov_thresh = JUNC_COV_THRESH
  log:
    "{workdir}/{outputdir}/logs/{grouplist}_split_clusters.txt"
  threads:
    10
  shell:
    """
    cd {params.workdir}
    cd {params.outputdir}
    cd {params.grouplist}
    mkdir -p split_cluster_output
    mkdir -p split_cluster_output/alt_three_prime
    mkdir -p split_cluster_output/alt_five_prime
    mkdir -p logs

    for i in {{1..100}}; do
      sbatch -W --job-name={params.job_name}_"$i" {params.run_files}/run_comb_patient_permute_ind_celltypes_merge_counts_2WT.sh {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_files/split_"$i" {params.cell_metadata} {params.comp_groups_column} {params.cell_groups_column} {params.nperm} {params.samples} {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_output output_"$i" {params.run_files} &
      done;
    wait

    touch {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_output/complete.txt
    """

""" Merge final output into one file and merge with all annotation information """
rule merge_annotate:
  input:
    "{workdir}/{outputdir}/{grouplist}/split_cluster_output/complete.txt"
  output:
    "{workdir}/{outputdir}/{grouplist}/merge_final_output/logOR_within_cell_type_ALT_3P_Junctions_with_threshold_info.txt"
  params:
    job_name = "merge_annotate",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdir}",
    grouplist = "{grouplist}",
    run_files = RUN_FILES,
  log:
    "{workdir}/{outputdir}/logs/{grouplist}_merge_annotate.txt"
  threads:
    10
  shell:
    """
    cd {params.workdir}
    cd {params.outputdir}
    cd {params.grouplist}
    mkdir -p merge_final_output

    sbatch -W --dependency=singleton --job-name={params.job_name} {params.run_files}/run_merge_combine_output.sh {params.run_files} {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_output {params.workdir}/{params.outputdir}/combined_metadata/combined_metadata.csv {params.workdir}/{params.outputdir}/{params.grouplist}/merge_final_output & wait

    sbatch -W --dependency=singleton --job-name={params.job_name} {params.run_files}/run_DTU_annotation.new.sh {params.workdir}/{params.outputdir}/{params.grouplist}/merge_final_output {params.run_files} & wait

    echo "Done!"
    """

""" IR: Combine Metadata to make Common Cluster ID's """
rule combine_meta_IR:
  input:
    config = "config.yaml"
  output:
    "{workdir}/{outputdirIR}/combined_metadata_IR/combined_metadata_IR.csv",
  params:
    job_name = "combine_meta",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdirIR}",
    run_files = RUN_FILESIR,
    junc_metadata = "{workdir}/{outputdirIR}/DT_input/3.Junction_metadata_exon",
    samples = SAMPLES,
  log:
    "{workdir}/{outputdirIR}/logs/combine_meta_IR.txt"
  threads:
    10
  shell:
    """
    #module load R/3.6.0
    cd {params.workdir}
    mkdir -p {params.outputdir}
    cd {params.outputdir}
    mkdir -p combined_metadata_IR

    Rscript {params.run_files}/combine_metadata_exon.R {params.junc_metadata} {params.workdir}/{params.outputdir}/combined_metadata_IR {params.samples}
    mv combined_metadata_IR/combined_metadata.csv combined_metadata_IR/combined_metadata_IR.csv
    """

""" IR: Split clusters for differential transcript usage """
rule split_clusters_IR:
  input:
    "{workdir}/{outputdirIR}/combined_metadata_IR/combined_metadata_IR.csv",
  output:
    "{workdir}/{outputdirIR}/{grouplist}/split_cluster_files_IR/complete_IR.txt"
  params:
    job_name = "split_clusters",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdirIR}",
    grouplist = GROUPLIST,
    run_files = RUN_FILESIR,
    counts = "{workdir}/{outputdirIR}/1.JuncCounts_matrix_exon",
    cell_metadata = "{workdir}/{outputdirIR}/DT_input/2.Cell_metadata",
    junc_metadata = "{workdir}/{outputdirIR}/DT_input/3.Junction_metadata_exon",
    comp_groups_column = COMP_GROUPS_COLUMN,
    cell_groups_column = CELL_GROUPS_COLUMN,
    samples = SAMPLES,
    comp1 = COMP1,
    comp2 = COMP2,
    junc_cov_thresh = JUNC_COV_THRESH,
    nchunk = NCHUNK
  log:
    "{workdir}/{outputdirIR}/logs/{grouplist}_split_clusters_IR.txt"
  threads:
    10
  shell:
    """
    cd {params.workdir}
    cd {params.outputdir}
    mkdir -p {params.grouplist}
    cd {params.grouplist}
    mkdir -p split_cluster_files_IR
    cd split_cluster_files_IR

    for i in {{1..{params.nchunk}}}
    do
      echo $i
      touch test.txt
      mkdir -p split_$i
      mkdir -p split_"$i"/counts_files
      mkdir -p split_"$i"/data_tables
    done
    #module load R/4.1.2
    Rscript {params.run_files}/split_clusters_exon.R {params.counts} {params.cell_metadata} {params.comp_groups_column} {params.cell_groups_column} {params.grouplist} {params.junc_metadata} {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_files_IR {params.samples} {params.junc_cov_thresh} {params.comp1} {params.comp2} {params.nchunk}
    touch complete_IR.txt
    """

""" IR: Batch submit each split cluster for differential analysis """
rule run_split_IR:
  input:
    "{workdir}/{outputdirIR}/{grouplist}/split_cluster_files_IR/complete_IR.txt"
  output:
    "{workdir}/{outputdirIR}/{grouplist}/split_cluster_output_IR/complete_IR.txt"
  params:
    job_name = "split_clusters",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdirIR}",
    grouplist = "{grouplist}",
    run_files = RUN_FILESIR,
    counts = "{workdir}/1.JuncCounts_matrix_exon",
    cell_metadata = "{workdir}/2.Cell_metadata",
    junc_metadata = "{workdir}/3.Junction_metadata_exon",
    comp_groups_column = COMP_GROUPS_COLUMN,
    cell_groups_column = CELL_GROUPS_COLUMN,
    samples = SAMPLES,
    nperm = NPERM,
    junc_cov_thresh = JUNC_COV_THRESH,
    nchunk = NCHUNK
  log:
    "{workdir}/{outputdirIR}/logs/{grouplist}_split_clusters_IR.txt"
  threads:
    10
  shell:
    """
    cd {params.workdir}
    cd {params.outputdir}
    cd {params.grouplist}
    mkdir -p split_cluster_output_IR
    mkdir -p split_cluster_output_IR/alt_three_prime
    mkdir -p logs

    for i in {{1..{params.nchunk}}}; do
      sbatch -W --job-name={params.job_name}_"$i" {params.run_files}/run_multi_patient_permute_merge_counts_exon.sh {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_files_IR/split_"$i" {params.cell_metadata} {params.comp_groups_column} {params.cell_groups_column} {params.nperm} {params.samples} {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_output_IR output_"$i" {params.run_files} &
      done;
    wait

    touch {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_output_IR/complete_IR.txt
    """

""" IR: Merge final output into one file and merge with all annotation information """
rule merge_annotate_IR:
  input:
    "{workdir}/{outputdirIR}/{grouplist}/split_cluster_output_IR/complete_IR.txt"
  output:
    "{workdir}/{outputdirIR}/{grouplist}/merge_final_output_IR/logOR_within_cell_type_ALT_3P_Junctions.txt"
  params:
    job_name = "merge_annotate",
    memory = "select[mem>100] rusage[mem=100]",
    workdir = "{workdir}",
    outputdir = "{outputdirIR}",
    grouplist = "{grouplist}",
    run_files = RUN_FILESIR,
  log:
    "{workdir}/{outputdirIR}/logs/{grouplist}_merge_annotate_IR.txt"
  threads:
    10
  shell:
    """
    cd {params.workdir}
    cd {params.outputdir}
    cd {params.grouplist}
    mkdir -p merge_final_output_IR

    sbatch -W --dependency=singleton --job-name={params.job_name} {params.run_files}/run_merge_combine_output_exon.sh {params.run_files} {params.workdir}/{params.outputdir}/{params.grouplist}/split_cluster_output_IR {params.workdir}/{params.outputdir}/combined_metadata_IR/combined_metadata_IR.csv {params.workdir}/{params.outputdir}/{params.grouplist}/merge_final_output_IR & wait

    echo "Done!"
    """
